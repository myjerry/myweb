<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import org.myjerry.myweb.ApplicationContext;
			import org.myjerry.myweb.model.Page;
			import org.myjerry.myweb.model.Template;
			
			[Bindable]
			private var chosen:Page = null;
			
			[Bindable]
			private var selectedItem:Template = null;
			
			protected function editPageContent():void {
				var view:PageContentView = new PageContentView();
				ApplicationContext.pushView(view);
				view.showPage(this.chosen);
			}
			
			protected function goBack():void {
				ApplicationContext.popView();
			}
			
			protected function reset():void {
				var page:Page;
				if(chosen != null) {
					page = chosen;
				} else {
					page = new Page();
				}
				
				this.pageTitle.text = page.title;
				this.pagePath.text = page.path;
				this.searchable.selected = page.searchable;
				this.draftPage.selected = page.isDraft;
				
				var template:Template = ApplicationContext.templateService.getTemplate(page.templateID);
				if(template == null) {
					// try and get the template from site wide properties
					template = ApplicationContext.templateService.getTemplate(ApplicationContext.site.templateID);
				}
				
				this.selectedItem = template;
			}
			
			public function showPage(page:Page):void {
				this.chosen = page;
				
				reset();
			}
			
			protected function savePageDetails():void {
				var page:Page;
				var newPage:Boolean = false;
				
				if(this.chosen == null) {
					page = new Page();
					newPage = true;
				} else {
					page = chosen;
				}
				
				page.title = this.pageTitle.text;
				page.path = this.pagePath.text;
				page.searchable = this.searchable.selected;
				page.isDraft = this.draftPage.selected;
				page.templateID = (this.templates.selectedItem as Template).templateID;
				
				ApplicationContext.pageService.savePage(page);
				
				if(newPage) {
					// reload page list
					ApplicationContext.site.reloadPages();
				}
			}
			
			protected function deletePage():void {
				if(chosen != null) {
					ApplicationContext.pageService.deletePage(chosen.pageID);
					goBack();
				}
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<s:Form width="100%" height="100%">
		<s:FormHeading label="Page Details" />
		
		<s:FormItem label="Page Title">
			<s:TextInput id="pageTitle" />
		</s:FormItem>
		
		<s:FormItem label="Path">
			<s:TextInput id="pagePath" enabled="{this.chosen.userCreated}" />
		</s:FormItem>
		
		<s:FormItem label="Template to use" >
			<s:ComboBox id="templates" selectedItem="{this.selectedItem}" dataProvider="{ApplicationContext.site.siteTemplates}" labelField="name" />
		</s:FormItem>
		
		<s:FormItem label="Searchable" >
			<s:CheckBox id="searchable" />
		</s:FormItem>
		
		<s:FormItem label="Draft" >
			<s:CheckBox id="draftPage" enabled="{this.chosen.userCreated}" />
		</s:FormItem>
		
	</s:Form>
	
	<s:HGroup width="100%">
		<s:Spacer width="100%" />
		
		<s:Button label="Edit Content" click="editPageContent()" />
		
		<s:Button label="Save" click="savePageDetails()" />
		
		<s:Button label="Reset" click="reset()" />
		
		<s:Button label="Delete" click="deletePage()" />
		
		<s:Button label="Back" click="goBack()" />
	</s:HGroup>
	
</s:Group>
