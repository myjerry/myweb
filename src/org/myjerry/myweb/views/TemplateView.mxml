<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" 
					width="100%" height="100%"
					label="Templates">
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			
			import org.myjerry.myweb.ApplicationContext;
			import org.myjerry.myweb.model.Template;
			
			protected var currentlyLoadedTemplate:Template = null;
			
			protected const templates:ArrayList = new ArrayList();
			
			override protected function initializationComplete():void {
				super.initializationComplete();
				
				loadAllTemplates();
			}
			
			protected function loadAllTemplates():void {
				var temp:ArrayList = ApplicationContext.site.templateService.getTemplates();
				templates.removeAll();
				templates.addAll(temp);
				
				if(this.currentlyLoadedTemplate != null) {
					this.templateList.selectedItem = this.currentlyLoadedTemplate;
				}
			}
			
			protected function reset():void {
				if(currentlyLoadedTemplate == null) {
					this.templateCode.text = '';
					this.templateName.text = '';
				} else {
					this.templateCode.text = this.currentlyLoadedTemplate.code;
					this.templateName.text = this.currentlyLoadedTemplate.name;
				}
			}
			
			protected function saveTemplate():void {
				if(this.currentlyLoadedTemplate != null) {
					this.saveTemplateFromFormData(this.currentlyLoadedTemplate);
				} else {
					this.saveTemplateFromFormData(new Template());
				}
			}
			
			protected function saveNewTemplate():void {
				this.saveTemplateFromFormData(new Template());
			}
			
			private function saveTemplateFromFormData(template:Template):void {
				template.name = this.templateName.text;
				template.code = this.templateCode.text;
				
				var rowID:Number = ApplicationContext.site.templateService.saveTemplate(template);
				template.templateID = rowID;
				this.currentlyLoadedTemplate = template;
				
				loadAllTemplates();
			}
			
			protected function openChosenTemplate():void {
				var chosen:Template = this.templateList.selectedItem as Template;
				this.currentlyLoadedTemplate = chosen;
				reset();
			}
			
			protected function deleteChosenTemplate():void {
				var chosen:Template = this.templateList.selectedItem as Template;
				ApplicationContext.site.templateService.deleteTemplate(chosen.templateID);

				this.currentlyLoadedTemplate = null;
				
				loadAllTemplates();
			}
		]]>
	</fx:Script>
	
	<s:HGroup height="100%" width="100%">
		<s:VGroup width="250" height="100%">
			<s:Label text="Available Templates" />
			<s:List width="100%" height="100%" id="templateList"  labelField="name" dataProvider="{this.templates}" />
		</s:VGroup>
		
		<s:Form width="100%" height="100%">
			<s:FormHeading label="Template Details" />
			
			<s:FormItem label="Name" >
				<s:TextInput width="100%" id="templateName" />
			</s:FormItem>
			
			<s:FormItem label="Code" height="100%">
				<s:TextArea width="100%" height="100%" id="templateCode" />
			</s:FormItem>
		</s:Form>
		
	</s:HGroup>
	
	<s:HGroup width="100%" >
		<s:Button label="Open" click="openChosenTemplate()" enabled="{this.templateList.selectedIndex != -1}" />
		<s:Button label="Delete" click="deleteChosenTemplate()" enabled="{this.templateList.selectedIndex != -1}" />
		
		<s:Spacer width="100%" />
		
		<s:Button label="Save" click="saveTemplate()" />
		<s:Button label="Save As" click="saveNewTemplate()" />
		<s:Button label="Cancel/Reset" click="reset()" />
	</s:HGroup>
	
</s:NavigatorContent>
